// PressureSensorForm.cpp : implementation file
//

#include "stdafx.h"
#include "T3000.h"
#include "PressureSensorForm.h"
 #include "../SQLiteDriver/CppSQLite3.h"
#include "global_function.h"
#include "OutPutDlg.h"
#include "MainFrm.h"
// CPressureSensorForm
 #define UNIT_PRESSURE 8
 #define MENU_LOCK 5
CString Pressure_Units[UNIT_PRESSURE]={_T("W.C"),_T("KPa"),_T("Psi"),_T("mmHg"),_T("In.Hg"),_T("Kg.cm"),_T("atm"),_T("bar")};
//SPECIAL_MENU_LOCK, Special menu lockout via keypad, serial port only, 
//	0=Full Menu, 1=Menu Disabled, 2=User Menu, 3 = The user need adjust setpoint in menu mode,4=disable display
CString STRING_MENU_LOCKS[MENU_LOCK]={_T("Full Menu"),_T("Menu Enable"),_T("Menu Disabled"),_T("Menu Setpoint"),_T("Display Disable")};

#define FRESH_PRESSURE_SENSOR_BACK  WM_USER+1007

DWORD WINAPI _BackFreshing_Pressure_Sensor(LPVOID pParam)
{
	CPressureSensorForm* dlg=(CPressureSensorForm*)(pParam);

	Sleep(1000);


	while(dlg->IsWindowVisible())
	{

		if (!is_connect())
		{
			Sleep(1000);
			continue;
		}
	 
		if(!no_mouse_keyboard_event_enable_refresh) 
		{
			Sleep(3000);
			continue ;
		}
		else
		{
			Sleep(2000);
		}
		Read_Multi(g_tstat_id,&product_register_value[450],450,50);  

		Read_Multi(g_tstat_id,&product_register_value[150],150,50); 
		 
		PostMessage(dlg->m_hWnd,FRESH_PRESSURE_SENSOR_BACK,0,0);
	}



	return 1;
}


IMPLEMENT_DYNCREATE(CPressureSensorForm, CFormView)

CPressureSensorForm::CPressureSensorForm()
	: CFormView(CPressureSensorForm::IDD)
{

}

CPressureSensorForm::~CPressureSensorForm()
{
}

void CPressureSensorForm::DoDataExchange(CDataExchange* pDX)
{
	CFormView::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_BOXUNIT, m_combox_unit);
	DDX_Control(pDX, IDC_COMBO_OUTPUTTYPE, m_cmbox_outputtype);
	DDX_Control(pDX, IDC_KEYPADLOCKCOMBO, m_keypad_lock);
	DDX_Control(pDX, IDC_SENSOR_TYPE, m_Sensor_Type_Combox);
	DDX_Control(pDX, IDC_COMBO_AM, m_am_combox);
	DDX_Control(pDX, IDC_COMBO_OUTPUT_RANGE, m_combox_output_range);
	DDX_Control(pDX, IDC_EDIT_FILTER, m_input_filter);
	DDX_Control(pDX, IDC_EDIT_SIGNAL, m_edit_signal);
	DDX_Control(pDX, IDC_MSFLEXGRID1, m_pressure_table);
}

BEGIN_MESSAGE_MAP(CPressureSensorForm, CFormView)
	ON_CBN_SELCHANGE(IDC_BOXUNIT, &CPressureSensorForm::OnCbnSelchangeBoxunit)
	ON_CBN_SELCHANGE(IDC_COMBO_OUTPUTTYPE, &CPressureSensorForm::OnCbnSelchangeComboOutputtype)
	ON_BN_CLICKED(IDC_BUTTON_OUTPUTTABLE, &CPressureSensorForm::OnBnClickedButtonOutputtable)
	ON_WM_DESTROY()
	ON_CBN_SELCHANGE(IDC_KEYPADLOCKCOMBO, &CPressureSensorForm::OnCbnSelchangeKeypadlockcombo)
	ON_CBN_SELCHANGE(IDC_SENSOR_TYPE, &CPressureSensorForm::OnCbnSelchangeSensorType)
	ON_CBN_SELCHANGE(IDC_COMBO_AM, &CPressureSensorForm::OnCbnSelchangeComboAm)

	ON_CBN_SELCHANGE(IDC_COMBO_OUTPUT_RANGE, &CPressureSensorForm::OnCbnSelchangeComboOutputRange)

ON_EN_SETFOCUS(IDC_PRESSURE_SENSOR, &CPressureSensorForm::OnEnSetfocusPressureSensor)
ON_EN_SETFOCUS(IDC_EDIT_FILTER, &CPressureSensorForm::OnEnSetfocusEditFilter)
ON_EN_SETFOCUS(IDC_EDIT_SENSOR_MIN, &CPressureSensorForm::OnSetfocusEditSensorMin)
ON_EN_SETFOCUS(IDC_EDIT_SENSOR_MAX, &CPressureSensorForm::OnSetfocusEditSensorMax)
END_MESSAGE_MAP()
#ifdef _DEBUG
void CPressureSensorForm::AssertValid() const
{
	CFormView::AssertValid();
}

#ifndef _WIN32_WCE
void CPressureSensorForm::Dump(CDumpContext& dc) const
{
	CFormView::Dump(dc);
}
#endif
#endif //_DEBUG
void CPressureSensorForm::Fresh(){
Initial_RegisterList();
m_pressure_table.put_Rows(11);
m_pressure_table.put_Cols(3);
m_pressure_table.put_TextMatrix(0,0,_T(""));
m_pressure_table.put_TextMatrix(0,1,_T("Pressure"));
m_pressure_table.put_TextMatrix(0,2,_T("AD"));
CString Strindex;
for (int i=1;i<11;i++)
{
  Strindex.Format(_T("%d"),i); 
  m_pressure_table.put_TextMatrix(i,0,Strindex);

}

m_combox_unit.ResetContent();
for (int i=0;i<UNIT_PRESSURE;i++)
{
	m_combox_unit.AddString(Pressure_Units[i]);
}


m_keypad_lock.ResetContent();
for (int i=0;i<MENU_LOCK;i++)
{
	m_keypad_lock.AddString(STRING_MENU_LOCKS[i]);
}

m_cmbox_outputtype.ResetContent();
m_cmbox_outputtype.AddString(_T("PID"));
m_cmbox_outputtype.AddString(_T("Transducer"));
//pressure sensor type.1=MPXV7002,2=26PCDFA,3=special
m_Sensor_Type_Combox.ResetContent();
m_Sensor_Type_Combox.AddString(_T("MPXV7002"));
m_Sensor_Type_Combox.AddString(_T("26PCDFA"));
m_Sensor_Type_Combox.AddString(_T("Special"));

m_am_combox.ResetContent();
m_am_combox.AddString(_T("Auto"));
m_am_combox.AddString(_T("Manual"));
/*
Ou1 - Output1 Scale -
1=0-10V, 
2=0-5V,
5= 4-20mA(for pressure)
 */
//
m_combox_output_range.ResetContent();
m_combox_output_range.AddString(_T("0-10V"));
m_combox_output_range.AddString(_T("0-5V"));
m_combox_output_range.AddString(_T("4-20mA"));
Show_Pressure();
if(hFirstThread != NULL)
	TerminateThread(hFirstThread, 0);
hFirstThread=NULL;
if (!hFirstThread)
{
	hFirstThread = CreateThread(NULL,NULL,_BackFreshing_Pressure_Sensor,this,NULL,0);
}
}
void CPressureSensorForm::Show_Pressure(){
CString StrTemp;

StrTemp.Format(_T("%d"),product_register_value[MODBUS_ADDRESS]);
GetDlgItem(IDC_ID_EDIT)->SetWindowText(StrTemp);
m_sn=get_serialnumber();
StrTemp.Format(_T("%d"),m_sn);
GetDlgItem(IDC_SERIALNUM_EDIT)->SetWindowText(StrTemp);
StrTemp.Format(_T("%0.1f"),get_curtstat_version());
GetDlgItem(IDC_FIRMWARV_EDIT)->SetWindowText(StrTemp);
StrTemp=GetProductName(product_register_value[MODBUS_PRODUCT_MODEL]);
GetDlgItem(IDC_MODEL_EDIT)->SetWindowText(StrTemp);
StrTemp.Format(_T("%d"),product_register_value[MODBUS_HARDWARE_REV]);
GetDlgItem(IDC_HARDWAREV_EDIT)->SetWindowText(StrTemp);
StrTemp.Format(_T("%d"),product_register_value[MODBUS_PIC_VERSION]);
GetDlgItem(IDC_PIC_EDIT)->SetWindowText(StrTemp);
//StrTemp.Format(_T("%d"),(short)product_register_value[MODBUS_PRESSURE_DATA_PA]);
if (product_register_value[MODBUS_INPUT_MANU_ENABLE]==0)
{

	double reg467=(double)((short)product_register_value[MODBUS_PRESSURE_RATIO]);
	double reg468=(double)((short)product_register_value[MODBUS_PRESSURE_INDEX]);
    m_output_value=reg467*pow(10,reg468);
}
else
{
   //m_output_value=(double)product_register_value[MODBUS_PRESSURE_ORG_VALUE];
  m_output_value= (double)((short)product_register_value[MODBUS_PRESSURE_ORG_VALUE]);
}

GetDlgItem(IDC_PRESSURE_SENSOR)->SetWindowText(Get_PressureSensor(m_output_value));


if ((product_register_value[MODBUS_PRESSURE_UNIT_SELECT]-1)<UNIT_PRESSURE)
{
m_combox_unit.SetCurSel((product_register_value[MODBUS_PRESSURE_UNIT_SELECT]-1));
}
else
{
m_combox_unit.SetCurSel(0);
}

if (product_register_value[MODBUS_PRESSURE_OUTPUT_SELECT]<2)
{
	m_cmbox_outputtype.SetCurSel(product_register_value[MODBUS_PRESSURE_OUTPUT_SELECT]);
}
else
{
	m_cmbox_outputtype.SetCurSel(0); 
}

if (product_register_value[MODBUS_SPECIAL_MENU_LOCK]>=0&&product_register_value[MODBUS_SPECIAL_MENU_LOCK]<=4)
{
  m_keypad_lock.SetCurSel(product_register_value[MODBUS_SPECIAL_MENU_LOCK]);
}
else
{
  m_keypad_lock.SetCurSel(0);
}

//MODBUS_INPUT_MANU_ENABLE=309
if (product_register_value[MODBUS_INPUT_MANU_ENABLE]>=0&&product_register_value[MODBUS_INPUT_MANU_ENABLE]<=1)
{
m_am_combox.SetCurSel(product_register_value[MODBUS_INPUT_MANU_ENABLE]);
}
else
{
  m_am_combox.SetCurSel(0);
}

StrTemp.Format(_T("%d"),product_register_value[MODBUS_FILTER]);
m_input_filter.SetWindowTextW(StrTemp);
//1,2,5
double max,min;
max=((double)((short)product_register_value[MODBUS_PRESSURE_MAX]))/100;
min=((double)((short)product_register_value[MODBUS_PRESSURE_MIN]))/100;
if (product_register_value[MODBUS_OUTPUT1_SCALE]==1)
{
   m_combox_output_range.SetCurSel(0);
   m_signal_value=((m_output_value-min)/(max-min))*10;
   if (m_signal_value>=10)
   {
     m_signal_value=10;
   }
   if (m_signal_value<=0)
   {
    m_signal_value = 0;
   }
   
   
   StrTemp.Format(_T("%.2lf V"),m_signal_value);
}
if (product_register_value[MODBUS_OUTPUT1_SCALE]==2)
{
	m_combox_output_range.SetCurSel(1);
	m_signal_value=((m_output_value-min)/(max-min))*5;

	if (m_signal_value>=5)
	{
		m_signal_value=5;
	}
	if (m_signal_value<=0)
	{
		m_signal_value = 0;
	}

	StrTemp.Format(_T("%.2lf V"),m_signal_value);
}
if (product_register_value[MODBUS_OUTPUT1_SCALE]==5)
{
	m_combox_output_range.SetCurSel(2);
	m_signal_value=((m_output_value-min)/(max-min))*16+4;
	if (m_signal_value>=20)
	{
		m_signal_value=20;
	}
	if (m_signal_value<=4)
	{
		m_signal_value = 4;
	}
	StrTemp.Format(_T("%.2lf ma"),m_signal_value);
	
}
m_edit_signal.SetWindowTextW(StrTemp);


if (product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]>=1&&product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]<=2)
{
	m_Sensor_Type_Combox.SetCurSel(product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]-1);
}
else
{

	m_Sensor_Type_Combox.SetCurSel(0);
}

//
 
for (int i=1;i<11;i++)
{
	StrTemp.Format(_T("%d"),(short)product_register_value[MODBUS_PRESSURE_CAL_PR1+2*(i-1)]); 
	m_pressure_table.put_TextMatrix(i,1,StrTemp);

	StrTemp.Format(_T("%d"),(short)product_register_value[MODBUS_PRESSURE_CAL_PR1+2*(i-1)+1]); 
	m_pressure_table.put_TextMatrix(i,2,StrTemp);

}
//-------------------------------
StrTemp.Format(_T("%.2f"),((float)((short)product_register_value[MODBUS_PRESSURE_MAX]))/100);
GetDlgItem(IDC_EDIT_SENSOR_MAX)->SetWindowTextW(StrTemp);

StrTemp.Format(_T("%.2f"),((float)((short)product_register_value[MODBUS_PRESSURE_MIN]))/100);
GetDlgItem(IDC_EDIT_SENSOR_MIN)->SetWindowTextW(StrTemp);

// GetDlgItem(IDC_EDIT_SENSOR_MIN)->SetWindowText(Get_PressureSensor((short)product_register_value[MODBUS_PRESSURE_MIN]));
// GetDlgItem(IDC_EDIT_SENSOR_MAX)->SetWindowText(Get_PressureSensor((short)product_register_value[MODBUS_PRESSURE_MAX]));
}
CString CPressureSensorForm::Get_PressureSensor(double sensor_value){
double sensorvalue=sensor_value;//(short)product_register_value[MODBUS_PRESSURE_DATA_PA];
 unsigned int unit=product_register_value[MODBUS_PRESSURE_UNIT_SELECT];
 double pressurevalue=sensor_value ;
 if (product_register_value[MODBUS_INPUT_MANU_ENABLE]==1)
 {
     pressurevalue/=100;
 }
 
 CString StrPressureValue;
 switch(unit){
 case 1://W.C /inh2o
 {
 
 
 StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 }
 break;
 case 2:
 {
	 //KP
	 
	 StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 }
 break;
 case 3:
 	{
		//Psi
	 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 	}
 	break;
 case 4:
 	{
		//mmHg
	 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 	}
 	break;
 case 5://in.Hg
 	{
		 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 
 	}
 	break;
 case 6://Kg/cm2
 	{
		 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 	}
 	break;
 case 7:
 	{//atm
		 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 	}
 	break;
 case 8:
 	{//bar
		 
		StrPressureValue.Format(_T("%.2lf"),pressurevalue);
 	}
 	break;
 default:
 {
 StrPressureValue=_T("Error");
 }
 break;
 }
 return StrPressureValue;

}

 

int  CPressureSensorForm::Get_RegID(CString Name)
{
	Name.TrimLeft();
	Name.TrimRight();
	int regid=-1;
	vector<T3Register>::iterator iter;
	for (iter=m_vecT3Register.begin();iter!=m_vecT3Register.end();iter++)
	{
		if (iter->regName==Name)
		{
			regid=iter->regID;
			break;
		}
	}
	return regid;
}
void CPressureSensorForm::Initial_RegisterList(){
#if 1
	MODBUS_SERIALNUMBER_LOWORD	=	0	;
	MODBUS_SERIALNUMBER_LOWORD	=	1	;
	MODBUS_SERIALNUMBER_HIWORD	=	2	;
	MODBUS_SERIALNUMBER_HIWORD	=	3	;
	MODBUS_VERSION_NUMBER_LO	=	4	;
	MODBUS_VERSION_NUMBER_HI	=	5	;
	MODBUS_ADDRESS	=	6	;
	MODBUS_PRODUCT_MODEL	=	7	;
	MODBUS_HARDWARE_REV	=	8	;
	MODBUS_PIC_VERSION	=	9	;
	MODBUS_ADDRESS_PLUG_N_PLAY	=	10	;
	MODBUS_CUSTOM_ADDRESS	=	14	;
	MODBUS_BASE_ADDRESS	=	15	;
	MODBUS_UPDATE_STATUS	=	16	;
	MODBUS_UPDATE_PTR_HI	=	17	;
	MODBUS_UPDATE_PTR_LO	=	18	;
	MODBUS_SCRATCHPAD_ADDRESS	=	19	;
	MODBUS_TEMPRATURE_CHIP	=	101	;
	MODBUS_COOLING_VALVE	=	102	;
	MODBUS_HEATING_VALVE	=	103	;
	MODBUS_COOLING_PID	=	104	;
	MODBUS_HEATING_PID	=	105	;
	MODBUS_COOL_HEAT_MODE	=	106	;
	MODBUS_MODE_OPERATION	=	107	;
	MODBUS_DIGITAL_OUTPUT_STATUS	=	108	;
	MODBUS_CALIBRATION	=	109	;
	MODBUS_CALIBRATION_ANALOG_IN1	=	110	;
	MODBUS_TEMP_SELECT	=	111	;
	MODBUS_DAC_OFFSET	=	112	;
	MODBUS_DELAY	=	113	;
	MODBUS_COOLING_PTERM	=	114	;
	MODBUS_COOLING_ITERM	=	115	;
	MODBUS_HEATING_PTERM	=	116	;
	MODBUS_HEATING_ITERM	=	117	;
	MODBUS_SEQUENCE	=	118	;
	MODBUS_COOLING_DEADBAND	=	119	;
	MODBUS_HEATING_DEADBAND	=	120	;
	MODBUS_DEGC_OR_F	=	121	;
	MODBUS_FAN_MODE	=	122	;
	MODBUS_NIGHT_HEATING_DEADBAND	=	123	;
	MODBUS_NIGHT_COOLING_DEADBAND	=	124	;
	MODBUS_APPLICATION	=	125	;
	MODBUS_POWERUP_SETPOINT	=	126	;
	MODBUS_POWERUP_MODE	=	127	;
	MODBUS_KEYPAD_SELECT	=	128	;
	MODBUS_AUTO_ONLY	=	129	;
	MODBUS_OUTPUT_SCALE	=	130	;
	MODBUS_MAX_SETPOINT	=	131	;
	MODBUS_MIN_SETPOINT	=	132	;
	MODBUS_SPECIAL_MENU_LOCK	=	133	;
	MODBUS_FACTORY_DEFAULTS	=	134	;
	MODBUS_COOLING_SETPOINT	=	135	;
	MODBUS_HEATING_SETPOINT	=	136	;
	MODBUS_FAN_SPEED	=	137	;
	MODBUS_FAN0_OPER_TABLE_COAST	=	138	;
	MODBUS_FAN0_OPER_TABLE_COOL1	=	139	;
	MODBUS_FAN0_OPER_TABLE_COOL2	=	140	;
	MODBUS_FAN0_OPER_TABLE_COOL3	=	141	;
	MODBUS_FAN0_OPER_TABLE_HEAT1	=	142	;
	MODBUS_FAN0_OPER_TABLE_HEAT2	=	143	;
	MODBUS_FAN0_OPER_TABLE_HEAT3	=	144	;
	MODBUS_FAN1_OPER_TABLE_COAST	=	145	;
	MODBUS_FAN1_OPER_TABLE_COOL1	=	146	;
	MODBUS_FAN1_OPER_TABLE_COOL2	=	147	;
	MODBUS_FAN1_OPER_TABLE_COOL3	=	148	;
	MODBUS_FAN1_OPER_TABLE_HEAT1	=	149	;
	MODBUS_FAN1_OPER_TABLE_HEAT2	=	150	;
	MODBUS_FAN1_OPER_TABLE_HEAT3	=	151	;
	MODBUS_FAN2_OPER_TABLE_COAST	=	152	;
	MODBUS_FAN2_OPER_TABLE_COOL1	=	153	;
	MODBUS_FAN2_OPER_TABLE_COOL2	=	154	;
	MODBUS_FAN2_OPER_TABLE_COOL3	=	155	;
	MODBUS_FAN2_OPER_TABLE_HEAT1	=	156	;
	MODBUS_FAN2_OPER_TABLE_HEAT2	=	157	;
	MODBUS_FAN2_OPER_TABLE_HEAT3	=	158	;
	MODBUS_FAN3_OPER_TABLE_COAST	=	159	;
	MODBUS_FAN3_OPER_TABLE_COOL1	=	160	;
	MODBUS_FAN3_OPER_TABLE_COOL2	=	161	;
	MODBUS_FAN3_OPER_TABLE_COOL3	=	162	;
	MODBUS_FAN3_OPER_TABLE_HEAT1	=	163	;
	MODBUS_FAN3_OPER_TABLE_HEAT2	=	164	;
	MODBUS_FAN3_OPER_TABLE_HEAT3	=	165	;
	MODBUS_FANAUT_OPER_TABLE_COAST	=	166	;
	MODBUS_FANAUT_OPER_TABLE_COOL1	=	167	;
	MODBUS_FANAUT_OPER_TABLE_COOL2	=	168	;
	MODBUS_FANAUT_OPER_TABLE_COOL3	=	169	;
	MODBUS_FANAUT_OPER_TABLE_HEAT1	=	170	;
	MODBUS_FANAUT_OPER_TABLE_HEAT2	=	171	;
	MODBUS_FANAUT_OPER_TABLE_HEAT3	=	172	;
	MODBUS_VALVE_OPERATION_TABLE_BEGIN	=	173	;
	MODBUS_VALVE_OPER_TABLE_COOL1	=	174	;
	MODBUS_VALVE_OPER_TABLE_COOL2	=	175	;
	MODBUS_VALVE_OPER_TABLE_COOL3	=	176	;
	MODBUS_VALVE_OPER_TABLE_HEAT1	=	177	;
	MODBUS_VALVE_OPER_TABLE_HEAT2	=	178	;
	MODBUS_VALVE_OPER_TABLE_HEAT3	=	179	;
	MODBUS_EXTERNAL_SENSOR_0	=	180	;
	MODBUS_EXTERNAL_SENSOR_1	=	181	;
	MODBUS_NIGHT_HEATING_SETPOINT	=	182	;
	MODBUS_NIGHT_COOLING_SETPOINT	=	183	;
	MODBUS_INFO_BYTE	=	184	;
	MODBUS_BAUDRATE	=	185	;
	MODBUS_OUTPUT1_SCALE	=	186	;
	MODBUS_OUTPUT2_SCALE	=	187	;
	MODBUS_ANALOG_IN1	=	188	;
	MODBUS_ANALOG_IN2	=	189	;
	MODBUS_DIGITAL_IN1	=	190	;
	MODBUS_OUTPUT1_DELAY_OFF_TO_ON	=	191	;
	MODBUS_OUTPUT2_DELAY_OFF_TO_ON	=	192	;
	MODBUS_OUTPUT3_DELAY_OFF_TO_ON	=	193	;
	MODBUS_OUTPUT4_DELAY_OFF_TO_ON	=	194	;
	MODBUS_OUTPUT5_DELAY_OFF_TO_ON	=	195	;
	MODBUS_OUTPUT1_DELAY_ON_TO_OFF	=	196	;
	MODBUS_OUTPUT2_DELAY_ON_TO_OFF	=	197	;
	MODBUS_OUTPUT3_DELAY_ON_TO_OFF	=	198	;
	MODBUS_OUTPUT4_DELAY_ON_TO_OFF	=	199	;
	MODBUS_OUTPUT5_DELAY_ON_TO_OFF	=	200	;
	MODBUS_CYCLING_DELAY	=	201	;
	MODBUS_CHANGOVER_DELAY	=	202	;
	MODBUS_DISPLAY	=	203	;
	MODBUS_LED1_CONTROL	=	204	;
	MODBUS_LED2_CONTROL	=	205	;
	MODBUS_LED3_CONTROL	=	206	;
	MODBUS_LED4_CONTROL	=	207	;
	MODBUS_LED5_CONTROL	=	208	;
	MODBUS_LED6_CONTROL	=	209	;
	MODBUS_LED7_CONTROL	=	210	;
	MODBUS_OVERRIDE_TIMER	=	211	;
	MODBUS_OVERRIDE_TIMER_LEFT	=	212	;
	MODBUS_FILTER	=	213	;
	MODBUS_HEAT_COOL_CONFIG	=	214	;
	MODBUS_INTERNAL_TEMP_IC	=	215	;
	MODBUS_INTERNAL_THERMISTOR	=	216	;
	MODBUS_CALIBRATION_INTERNAL_THERMISTOR	=	217	;
	MODBUS_CALIBRATION_ANALOG_IN2	=	218	;
	MODBUS_TABLE1_ZERO	=	219	;
	MODBUS_TABLE1_HALFONE	=	220	;
	MODBUS_TABLE1_ONE	=	221	;
	MODBUS_TABLE1_HALFTWO	=	222	;
	MODBUS_TABLE1_TWO	=	223	;
	MODBUS_TABLE1_HALFTHREE	=	224	;
	MODBUS_TABLE1_THREE	=	225	;
	MODBUS_TABLE1_HALFFOUR	=	226	;
	MODBUS_TABLE1_FOUR	=	227	;
	MODBUS_TABLE1_HALFFIVE	=	228	;
	MODBUS_TABLE1_FIVE	=	229	;
	MODBUS_TABLE2_ZERO	=	230	;
	MODBUS_TABLE2_HALFONE	=	231	;
	MODBUS_TABLE2_ONE	=	232	;
	MODBUS_TABLE2_HALFTWO	=	233	;
	MODBUS_TABLE2_TWO	=	234	;
	MODBUS_TABLE2_HALFTHREE	=	235	;
	MODBUS_TABLE2_THREE	=	236	;
	MODBUS_TABLE2_HALFFOUR	=	237	;
	MODBUS_TABLE2_FOUR	=	238	;
	MODBUS_TABLE2_HALFFIVE	=	239	;
	MODBUS_TABLE2_FIVE	=	240	;
	MODBUS_INPUT1_SELECT	=	241	;
	MODBUS_UNIVERSAL_DB_HI	=	242	;
	MODBUS_UNIVERSAL_DB_LO	=	243	;
	MODBUS_UNIVERSAL_PTERM	=	244	;
	MODBUS_UNIVERSAL_ITERM	=	245	;
	MODBUS_UNIVERSAL_SET	=	246	;
	MODBUS_PID_OUTPUT1	=	247	;
	MODBUS_PID_OUTPUT2	=	248	;
	MODBUS_PID_OUTPUT3	=	249	;
	MODBUS_PID_OUTPUT4	=	250	;
	MODBUS_PID_OUTPUT5	=	251	;
	MODBUS_PID_OUTPUT6	=	252	;
	MODBUS_PID_OUTPUT7	=	253	;
	MODBUS_UNIVERSAL_OUTPUT_BEGIN	=	254	;
	MODBUS_UNIVERSAL_OUTPUT_COOL1	=	255	;
	MODBUS_UNIVERSAL_OUTPUT_COOL2	=	256	;
	MODBUS_UNIVERSAL_OUTPUT_COOL3	=	257	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT1	=	258	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT2	=	259	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT3	=	260	;
	MODBUS_UNIVERSAL_VALVE_BEGIN	=	261	;
	MODBUS_UNIVERSAL_VALVE_COOL1	=	262	;
	MODBUS_UNIVERSAL_VALVE_COOL2	=	263	;
	MODBUS_UNIVERSAL_VALVE_COOL3	=	264	;
	MODBUS_UNIVERSAL_VALVE_HEAT1	=	265	;
	MODBUS_UNIVERSAL_VALVE_HEAT2	=	266	;
	MODBUS_UNIVERSAL_VALVE_HEAT3	=	267	;
	MODBUS_HEAT_UNIVERSAL_TABLE	=	268	;
	MODBUS_COOL_UNIVERSAL_TABLE	=	269	;
	MODBUS_PID_UNIVERSAL	=	270	;
	MODBUS_UNITS1_HIGH	=	271	;
	MODBUS_UNITS1_LOW	=	272	;
	MODBUS_UNITS2_HIGH	=	273	;
	MODBUS_UNITS2_LOW	=	274	;
	MODBUS_UNIVERSAL_NIGHTSET	=	275	;
	MODBUS_HEAT_ORIGINAL_TABLE	=	276	;
	MODBUS_COOL_ORIGINAL_TABLE	=	277	;
	MODBUS_PID2_MODE_OPERATION	=	278	;
	MODBUS_VALVE_TRAVEL_TIME	=	279	;
	MODBUS_MODE_OUTPUT1	=	280	;
	MODBUS_MODE_OUTPUT2	=	281	;
	MODBUS_MODE_OUTPUT3	=	282	;
	MODBUS_MODE_OUTPUT4	=	283	;
	MODBUS_MODE_OUTPUT5	=	284	;
	MODBUS_VALVE_PERCENT	=	285	;
	MODBUS_INTERLOCK_OUTPUT1	=	286	;
	MODBUS_INTERLOCK_OUTPUT2	=	287	;
	MODBUS_INTERLOCK_OUTPUT3	=	288	;
	MODBUS_INTERLOCK_OUTPUT4	=	289	;
	MODBUS_INTERLOCK_OUTPUT5	=	290	;
	MODBUS_INTERLOCK_OUTPUT6	=	291	;
	MODBUS_INTERLOCK_OUTPUT7	=	292	;
	MODBUS_SETPOINT_INCREASE	=	293	;
	MODBUS_LAST_KEY_TIMER	=	294	;
	MODBUS_FREEZE_TEMP_SETPOIN	=	295	;
	MODBUS_FREEZE_DELAY_ON	=	296	;
	MODBUS_FREEZE_DELAY_OFF	=	297	;
	MODBUS_ANALOG1_FUNCTION	=	298	;
	MODBUS_ANALOG2_FUNCTION	=	299	;
	MODBUS_DIGITAL1_FUNCTION	=	300	;
	MODBUS_TIMER_ON	=	301	;
	MODBUS_TIMER_OFF	=	302	;
	MODBUS_TIMER_UNITS	=	303	;
	MODBUS_KEYPAD_VALUE	=	304	;
	MODBUS_DISPLAY_HUNDRED	=	305	;
	MODBUS_DISPLAY_TEN	=	306	;
	MODBUS_DISPLAY_DIGITAL	=	307	;
	MODBUS_DISPLAY_STATUS	=	308	;
	MODBUS_INPUT_MANU_ENABLE	=	309	;
	MODBUS_OUTPUT_MANU_ENABLE	=	310	;
	MODBUS_DIGITAL_INPUT	=	311	;
	MODBUS_MANU_RELAY1	=	312	;
	MODBUS_MANU_RELAY2	=	313	;
	MODBUS_MANU_RELAY3	=	314	;
	MODBUS_MANU_RELAY4	=	315	;
	MODBUS_MANU_RELAY5	=	316	;
	MODBUS_DEAD_MASTER	=	317	;
	MODBUS_ROUND_DISPLAY	=	318	;
	MODBUS_MIN_ADDRESS	=	319	;
	MODBUS_MAX_ADDRESS	=	320	;
	MODBUS_FAN_GRIDPOINT	=	321	;
	MODBUS_MODE_GRIDPOINT	=	322	;
	MODBUS_HOLD_GRIDPOINT	=	323	;
	MODBUS_CONFIGURATION	=	324	;
	MODBUS_UTIL_MODE	=	325	;
	MODBUS_EEPROM_SIZE	=	326	;
	MODBUS_TIMER_SELECT	=	327	;
	MODBUS_OUTPUT1_FUNCTION	=	328	;
	MODBUS_ROTATION_OUT2	=	329	;
	MODBUS_ROTATION_OUT3	=	330	;
	MODBUS_ROTATION_OUT4	=	331	;
	MODBUS_ROTATION_OUT5	=	332	;
	MODBUS_ROTATION_TIME_LEFT	=	333	;
	MODBUS_OUTPUT2_FUNCTION	=	334	;
	MODBUS_OUTPUT3_FUNCTION	=	335	;
	MODBUS_OUTPUT4_FUNCTION	=	336	;
	MODBUS_OUTPUT5_FUNCTION	=	337	;
	MODBUS_DEFAULT_SETPOINT	=	338	;
	MODBUS_SETPOINT_CONTROL	=	339	;
	MODBUS_PIR_STAGE	=	340	;
	MODBUS_OUTPUT_PWM_AUTO_COAST	=	341	;
	MODBUS_OUTPUT_PWM_AUTO_COOL1	=	342	;
	MODBUS_OUTPUT_PWM_AUTO_COOL2	=	343	;
	MODBUS_OUTPUT_PWM_AUTO_COOL3	=	344	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT1	=	345	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT2	=	346	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT3	=	347	;
	MODBUS_PWM_OUT4	=	348	;
	MODBUS_PWM_OUT5	=	349	;
	MODBUS_FREE_COOL_CONFIG	=	350	;
	MODBUS_VALVE_OFF_TABLE_COAST	=	351	;
	MODBUS_VALVE_OFF_TABLE_COOL1	=	352	;
	MODBUS_VALVE_OFF_TABLE_COOL2	=	353	;
	MODBUS_VALVE_OFF_TABLE_COOL3	=	354	;
	MODBUS_VALVE_OFF_TABLE_HEAT1	=	355	;
	MODBUS_VALVE_OFF_TABLE_HEAT2	=	356	;
	MODBUS_VALVE_OFF_TABLE_HEAT3	=	357	;
	MODBUS_LOCK_REGISTER	=	358	;
	MODBUS_ANALOG1_RANGE	=	359	;
	MODBUS_ANALOG2_RANGE	=	360	;
	MODBUS_ANALOG3_RANGE	=	361	;
	MODBUS_ANALOG4_RANGE	=	362	;
	MODBUS_ANALOG5_RANGE	=	363	;
	MODBUS_ANALOG6_RANGE	=	364	;
	MODBUS_ANALOG7_RANGE	=	365	;
	MODBUS_ANALOG8_RANGE	=	366	;
	MODBUS_ANALOG_INPUT1	=	367	;
	MODBUS_ANALOG_INPUT2	=	368	;
	MODBUS_ANALOG_INPUT3	=	369	;
	MODBUS_ANALOG_INPUT4	=	370	;
	MODBUS_ANALOG_INPUT5	=	371	;
	MODBUS_ANALOG_INPUT6	=	372	;
	MODBUS_ANALOG_INPUT7	=	373	;
	MODBUS_ANALOG_INPUT8	=	374	;
	MODBUS_CALIBRATION_ANALOG1	=	375	;
	MODBUS_CALIBRATION_ANALOG2	=	376	;
	MODBUS_CALIBRATION_ANALOG3	=	377	;
	MODBUS_CALIBRATION_ANALOG4	=	378	;
	MODBUS_CALIBRATION_ANALOG5	=	379	;
	MODBUS_CALIBRATION_ANALOG6	=	380	;
	MODBUS_CALIBRATION_ANALOG7	=	381	;
	MODBUS_CALIBRATION_ANALOG8	=	382	;
	MODBUS_LINE1_CHAR1	=	383	;
	MODBUS_LINE1_CHAR2	=	384	;
	MODBUS_LINE1_CHAR3	=	385	;
	MODBUS_LINE1_CHAR4	=	386	;
	MODBUS_LINE1_CHAR5	=	387	;
	MODBUS_LINE1_CHAR6	=	388	;
	MODBUS_LINE1_CHAR7	=	389	;
	MODBUS_LINE1_CHAR8	=	390	;
	MODBUS_LINE2_CHAR1	=	391	;
	MODBUS_LINE2_CHAR2	=	392	;
	MODBUS_LINE2_CHAR3	=	393	;
	MODBUS_LINE2_CHAR4	=	394	;
	MODBUS_LINE2_CHAR5	=	395	;
	MODBUS_LINE2_CHAR6	=	396	;
	MODBUS_LINE2_CHAR7	=	397	;
	MODBUS_LINE2_CHAR8	=	398	;
	MODBUS_LCD_TURN_OFF	=	399	;
	MODBUS_LCD_SCREEN1	=	400	;
	MODBUS_LCD_SCREEN2	=	401	;
	MODBUS_SUN_ICON_CONTROL	=	402	;
	MODBUS_MOON_ICON_CONTROL	=	403	;
	MODBUS_TURN_OFF_FAN	=	404	;
	MODBUS_TEST2	=	405	;
	MODBUS_TEST3	=	406	;
	MODBUS_PRESSURE_DATA_WC	=	407	;
	MODBUS_PRESSURE_DATA_PA	=	408	;
	MODBUS_FEEDBACK_DATA	=	409	;
	MODBUS_DAC_DATA	=	410	;
	MODBUS_PRESSURE_SENSOR_SELECT	=	411	;
	MODBUS_PRESSURE_UNIT_SELECT	=	412	;
	MODBUS_PRESSURE_MIN	=	413	;
	MODBUS_PRESSURE_MAX	=	414	;
	MODBUS_CAL	=	415	;
	MODBUS_MODE_SELECT	=	416	;
	MODBUS_DEFAULT	=	417	;
	MODBUS_OUTPUT_USER_RANGE	=	418	;
	MODBUS_PRESSURE_OUTPUT_SELECT	=	419	;
	MODBUS_PRESSURE_SETPOINT	=	420	;
	MODBUS_PRESSURE_CAL_POINTS	=	421	;
	MODBUS_PRESSURE_CAL_ZERO	=	422	;
	MODBUS_OUTPUT_VOLT_OFFSET	=	423	;
	MODBUS_OUTPUT_CURRENT_OFFSET	=	424	;
	MODBUS_OUTPUT_CURRENT_ADJ	=	425	;
	MODBUS_PRESSURE_CAL_PR1	=	426	;
	MODBUS_PRESSURE_CAL_VOLT1	=	427	;
	MODBUS_PRESSURE_CAL_PR2	=	428	;
	MODBUS_PRESSURE_CAL_VOLT2	=	429	;
	MODBUS_PRESSURE_CAL_PR3	=	430	;
	MODBUS_PRESSURE_CAL_VOLT3	=	431	;
	MODBUS_PRESSURE_CAL_PR4	=	432	;
	MODBUS_PRESSURE_CAL_VOLT4	=	433	;
	MODBUS_PRESSURE_CAL_PR5	=	434	;
	MODBUS_PRESSURE_CAL_VOLT5	=	435	;
	MODBUS_PRESSURE_CAL_PR6	=	436	;
	MODBUS_PRESSURE_CAL_VOLT6	=	437	;
	MODBUS_PRESSURE_CAL_PR7	=	438	;
	MODBUS_PRESSURE_CAL_VOLT7	=	439	;
	MODBUS_PRESSURE_CAL_PR8	=	440	;
	MODBUS_PRESSURE_CAL_VOLT8	=	441	;
	MODBUS_PRESSURE_CAL_PR9	=	442	;
	MODBUS_PRESSURE_CAL_VOLT9	=	443	;
	MODBUS_PRESSURE_CAL_PR10	=	444	;
	MODBUS_PRESSURE_CAL_VOLT10	=	445	;
	MODBUS_OUTPUT_VOLT_CALIBRATION1	=	446	;
	MODBUS_OUTPUT_VOLT_CALIBRATION2	=	447	;
	MODBUS_OUTPUT_VOLT_CALIBRATION3	=	448	;
	MODBUS_OUTPUT_VOLT_CALIBRATION4	=	449	;
	MODBUS_OUTPUT_VOLT_CALIBRATION5	=	450	;
	MODBUS_OUTPUT_VOLT_CALIBRATION6	=	451	;
	MODBUS_OUTPUT_VOLT_CALIBRATION7	=	452	;
	MODBUS_OUTPUT_VOLT_CALIBRATION8	=	453	;
	MODBUS_OUTPUT_VOLT_CALIBRATION9	=	454	;
	MODBUS_OUTPUT_VOLT_CALIBRATION10	=	455	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION1	=	456	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION2	=	457	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION3	=	458	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION4	=	459	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION5	=	460	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION6	=	461	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION7	=	462	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION8	=	463	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION9	=	464	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION10	=	465	;
	MODBUS_CAL_UNIT	=	466	;
	     MODBUS_PRESSURE_RATIO=	467;
	 	MODBUS_PRESSURE_INDEX=	468;
	 	MODBUS_PRESSURE_ORG_VALUE=	469;


#endif
 
#if 1
	T3Register temp;
	CppSQLite3DB SqliteDBT3000;
	CppSQLite3Query q;
	SqliteDBT3000.open((UTF8MBSTR)g_strDatabasefilepath);
	CString SQL = _T("select * from PS_Registerlist");
	q = SqliteDBT3000.execQuery((UTF8MBSTR)SQL);
	_variant_t vartemp;
	while(!q.eof())
	{
		temp.regID=q.getIntField("RegID");
		temp.regName =q.getValuebyName(_T("Reg_Name"));
		 
		q.nextRow();
		m_vecT3Register.push_back(temp);
	}
	SqliteDBT3000.closedb();
#endif 
 
#if 1
	MODBUS_SERIALNUMBER_LOWORD	=	Get_RegID(_T("	MODBUS_SERIALNUMBER_LOWORD	"))	;
	MODBUS_SERIALNUMBER_LOWORD	=	Get_RegID(_T("	MODBUS_SERIALNUMBER_LOWORD	"))	;
	MODBUS_SERIALNUMBER_HIWORD	=	Get_RegID(_T("	MODBUS_SERIALNUMBER_HIWORD	"))	;
	MODBUS_SERIALNUMBER_HIWORD	=	Get_RegID(_T("	MODBUS_SERIALNUMBER_HIWORD	"))	;
	MODBUS_VERSION_NUMBER_LO	=	Get_RegID(_T("	MODBUS_VERSION_NUMBER_LO	"))	;
	MODBUS_VERSION_NUMBER_HI	=	Get_RegID(_T("	MODBUS_VERSION_NUMBER_HI	"))	;
	MODBUS_ADDRESS	=	Get_RegID(_T("	MODBUS_ADDRESS	"))	;
	MODBUS_PRODUCT_MODEL	=	Get_RegID(_T("	MODBUS_PRODUCT_MODEL	"))	;
	MODBUS_HARDWARE_REV	=	Get_RegID(_T("	MODBUS_HARDWARE_REV	"))	;
	MODBUS_PIC_VERSION	=	Get_RegID(_T("	MODBUS_PIC_VERSION	"))	;
	MODBUS_ADDRESS_PLUG_N_PLAY	=	Get_RegID(_T("	MODBUS_ADDRESS_PLUG_N_PLAY	"))	;
	MODBUS_CUSTOM_ADDRESS	=	Get_RegID(_T("	MODBUS_CUSTOM_ADDRESS	"))	;
	MODBUS_BASE_ADDRESS	=	Get_RegID(_T("	MODBUS_BASE_ADDRESS	"))	;
	MODBUS_UPDATE_STATUS	=	Get_RegID(_T("	MODBUS_UPDATE_STATUS	"))	;
	MODBUS_UPDATE_PTR_HI	=	Get_RegID(_T("	MODBUS_UPDATE_PTR_HI	"))	;
	MODBUS_UPDATE_PTR_LO	=	Get_RegID(_T("	MODBUS_UPDATE_PTR_LO	"))	;
	MODBUS_SCRATCHPAD_ADDRESS	=	Get_RegID(_T("	MODBUS_SCRATCHPAD_ADDRESS	"))	;
	MODBUS_TEMPRATURE_CHIP	=	Get_RegID(_T("	MODBUS_TEMPRATURE_CHIP	"))	;
	MODBUS_COOLING_VALVE	=	Get_RegID(_T("	MODBUS_COOLING_VALVE	"))	;
	MODBUS_HEATING_VALVE	=	Get_RegID(_T("	MODBUS_HEATING_VALVE	"))	;
	MODBUS_COOLING_PID	=	Get_RegID(_T("	MODBUS_COOLING_PID	"))	;
	MODBUS_HEATING_PID	=	Get_RegID(_T("	MODBUS_HEATING_PID	"))	;
	MODBUS_COOL_HEAT_MODE	=	Get_RegID(_T("	MODBUS_COOL_HEAT_MODE	"))	;
	MODBUS_MODE_OPERATION	=	Get_RegID(_T("	MODBUS_MODE_OPERATION	"))	;
	MODBUS_DIGITAL_OUTPUT_STATUS	=	Get_RegID(_T("	MODBUS_DIGITAL_OUTPUT_STATUS	"))	;
	MODBUS_CALIBRATION	=	Get_RegID(_T("	MODBUS_CALIBRATION	"))	;
	MODBUS_CALIBRATION_ANALOG_IN1	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG_IN1	"))	;
	MODBUS_TEMP_SELECT	=	Get_RegID(_T("	MODBUS_TEMP_SELECT	"))	;
	MODBUS_DAC_OFFSET	=	Get_RegID(_T("	MODBUS_DAC_OFFSET	"))	;
	MODBUS_DELAY	=	Get_RegID(_T("	MODBUS_DELAY	"))	;
	MODBUS_COOLING_PTERM	=	Get_RegID(_T("	MODBUS_COOLING_PTERM	"))	;
	MODBUS_COOLING_ITERM	=	Get_RegID(_T("	MODBUS_COOLING_ITERM	"))	;
	MODBUS_HEATING_PTERM	=	Get_RegID(_T("	MODBUS_HEATING_PTERM	"))	;
	MODBUS_HEATING_ITERM	=	Get_RegID(_T("	MODBUS_HEATING_ITERM	"))	;
	MODBUS_SEQUENCE	=	Get_RegID(_T("	MODBUS_SEQUENCE	"))	;
	MODBUS_COOLING_DEADBAND	=	Get_RegID(_T("	MODBUS_COOLING_DEADBAND	"))	;
	MODBUS_HEATING_DEADBAND	=	Get_RegID(_T("	MODBUS_HEATING_DEADBAND	"))	;
	MODBUS_DEGC_OR_F	=	Get_RegID(_T("	MODBUS_DEGC_OR_F	"))	;
	MODBUS_FAN_MODE	=	Get_RegID(_T("	MODBUS_FAN_MODE	"))	;
	MODBUS_NIGHT_HEATING_DEADBAND	=	Get_RegID(_T("	MODBUS_NIGHT_HEATING_DEADBAND	"))	;
	MODBUS_NIGHT_COOLING_DEADBAND	=	Get_RegID(_T("	MODBUS_NIGHT_COOLING_DEADBAND	"))	;
	MODBUS_APPLICATION	=	Get_RegID(_T("	MODBUS_APPLICATION	"))	;
	MODBUS_POWERUP_SETPOINT	=	Get_RegID(_T("	MODBUS_POWERUP_SETPOINT	"))	;
	MODBUS_POWERUP_MODE	=	Get_RegID(_T("	MODBUS_POWERUP_MODE	"))	;
	MODBUS_KEYPAD_SELECT	=	Get_RegID(_T("	MODBUS_KEYPAD_SELECT	"))	;
	MODBUS_AUTO_ONLY	=	Get_RegID(_T("	MODBUS_AUTO_ONLY	"))	;
	MODBUS_OUTPUT_SCALE	=	Get_RegID(_T("	MODBUS_OUTPUT_SCALE	"))	;
	MODBUS_MAX_SETPOINT	=	Get_RegID(_T("	MODBUS_MAX_SETPOINT	"))	;
	MODBUS_MIN_SETPOINT	=	Get_RegID(_T("	MODBUS_MIN_SETPOINT	"))	;
	MODBUS_SPECIAL_MENU_LOCK	=	Get_RegID(_T("	MODBUS_SPECIAL_MENU_LOCK	"))	;
	MODBUS_FACTORY_DEFAULTS	=	Get_RegID(_T("	MODBUS_FACTORY_DEFAULTS	"))	;
	MODBUS_COOLING_SETPOINT	=	Get_RegID(_T("	MODBUS_COOLING_SETPOINT	"))	;
	MODBUS_HEATING_SETPOINT	=	Get_RegID(_T("	MODBUS_HEATING_SETPOINT	"))	;
	MODBUS_FAN_SPEED	=	Get_RegID(_T("	MODBUS_FAN_SPEED	"))	;
	MODBUS_FAN0_OPER_TABLE_COAST	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_COAST	"))	;
	MODBUS_FAN0_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_COOL1	"))	;
	MODBUS_FAN0_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_COOL2	"))	;
	MODBUS_FAN0_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_COOL3	"))	;
	MODBUS_FAN0_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_HEAT1	"))	;
	MODBUS_FAN0_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_HEAT2	"))	;
	MODBUS_FAN0_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_FAN0_OPER_TABLE_HEAT3	"))	;
	MODBUS_FAN1_OPER_TABLE_COAST	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_COAST	"))	;
	MODBUS_FAN1_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_COOL1	"))	;
	MODBUS_FAN1_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_COOL2	"))	;
	MODBUS_FAN1_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_COOL3	"))	;
	MODBUS_FAN1_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_HEAT1	"))	;
	MODBUS_FAN1_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_HEAT2	"))	;
	MODBUS_FAN1_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_FAN1_OPER_TABLE_HEAT3	"))	;
	MODBUS_FAN2_OPER_TABLE_COAST	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_COAST	"))	;
	MODBUS_FAN2_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_COOL1	"))	;
	MODBUS_FAN2_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_COOL2	"))	;
	MODBUS_FAN2_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_COOL3	"))	;
	MODBUS_FAN2_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_HEAT1	"))	;
	MODBUS_FAN2_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_HEAT2	"))	;
	MODBUS_FAN2_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_FAN2_OPER_TABLE_HEAT3	"))	;
	MODBUS_FAN3_OPER_TABLE_COAST	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_COAST	"))	;
	MODBUS_FAN3_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_COOL1	"))	;
	MODBUS_FAN3_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_COOL2	"))	;
	MODBUS_FAN3_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_COOL3	"))	;
	MODBUS_FAN3_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_HEAT1	"))	;
	MODBUS_FAN3_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_HEAT2	"))	;
	MODBUS_FAN3_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_FAN3_OPER_TABLE_HEAT3	"))	;
	MODBUS_FANAUT_OPER_TABLE_COAST	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_COAST	"))	;
	MODBUS_FANAUT_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_COOL1	"))	;
	MODBUS_FANAUT_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_COOL2	"))	;
	MODBUS_FANAUT_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_COOL3	"))	;
	MODBUS_FANAUT_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_HEAT1	"))	;
	MODBUS_FANAUT_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_HEAT2	"))	;
	MODBUS_FANAUT_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_FANAUT_OPER_TABLE_HEAT3	"))	;
	MODBUS_VALVE_OPERATION_TABLE_BEGIN	=	Get_RegID(_T("	MODBUS_VALVE_OPERATION_TABLE_BEGIN	"))	;
	MODBUS_VALVE_OPER_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_COOL1	"))	;
	MODBUS_VALVE_OPER_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_COOL2	"))	;
	MODBUS_VALVE_OPER_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_COOL3	"))	;
	MODBUS_VALVE_OPER_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_HEAT1	"))	;
	MODBUS_VALVE_OPER_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_HEAT2	"))	;
	MODBUS_VALVE_OPER_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_VALVE_OPER_TABLE_HEAT3	"))	;
	MODBUS_EXTERNAL_SENSOR_0	=	Get_RegID(_T("	MODBUS_EXTERNAL_SENSOR_0	"))	;
	MODBUS_EXTERNAL_SENSOR_1	=	Get_RegID(_T("	MODBUS_EXTERNAL_SENSOR_1	"))	;
	MODBUS_NIGHT_HEATING_SETPOINT	=	Get_RegID(_T("	MODBUS_NIGHT_HEATING_SETPOINT	"))	;
	MODBUS_NIGHT_COOLING_SETPOINT	=	Get_RegID(_T("	MODBUS_NIGHT_COOLING_SETPOINT	"))	;
	MODBUS_INFO_BYTE	=	Get_RegID(_T("	MODBUS_INFO_BYTE	"))	;
	MODBUS_BAUDRATE	=	Get_RegID(_T("	MODBUS_BAUDRATE	"))	;
	MODBUS_OUTPUT1_SCALE	=	Get_RegID(_T("	MODBUS_OUTPUT1_SCALE	"))	;
	MODBUS_OUTPUT2_SCALE	=	Get_RegID(_T("	MODBUS_OUTPUT2_SCALE	"))	;
	MODBUS_ANALOG_IN1	=	Get_RegID(_T("	MODBUS_ANALOG_IN1	"))	;
	MODBUS_ANALOG_IN2	=	Get_RegID(_T("	MODBUS_ANALOG_IN2	"))	;
	MODBUS_DIGITAL_IN1	=	Get_RegID(_T("	MODBUS_DIGITAL_IN1	"))	;
	MODBUS_OUTPUT1_DELAY_OFF_TO_ON	=	Get_RegID(_T("	MODBUS_OUTPUT1_DELAY_OFF_TO_ON	"))	;
	MODBUS_OUTPUT2_DELAY_OFF_TO_ON	=	Get_RegID(_T("	MODBUS_OUTPUT2_DELAY_OFF_TO_ON	"))	;
	MODBUS_OUTPUT3_DELAY_OFF_TO_ON	=	Get_RegID(_T("	MODBUS_OUTPUT3_DELAY_OFF_TO_ON	"))	;
	MODBUS_OUTPUT4_DELAY_OFF_TO_ON	=	Get_RegID(_T("	MODBUS_OUTPUT4_DELAY_OFF_TO_ON	"))	;
	MODBUS_OUTPUT5_DELAY_OFF_TO_ON	=	Get_RegID(_T("	MODBUS_OUTPUT5_DELAY_OFF_TO_ON	"))	;
	MODBUS_OUTPUT1_DELAY_ON_TO_OFF	=	Get_RegID(_T("	MODBUS_OUTPUT1_DELAY_ON_TO_OFF	"))	;
	MODBUS_OUTPUT2_DELAY_ON_TO_OFF	=	Get_RegID(_T("	MODBUS_OUTPUT2_DELAY_ON_TO_OFF	"))	;
	MODBUS_OUTPUT3_DELAY_ON_TO_OFF	=	Get_RegID(_T("	MODBUS_OUTPUT3_DELAY_ON_TO_OFF	"))	;
	MODBUS_OUTPUT4_DELAY_ON_TO_OFF	=	Get_RegID(_T("	MODBUS_OUTPUT4_DELAY_ON_TO_OFF	"))	;
	MODBUS_OUTPUT5_DELAY_ON_TO_OFF	=	Get_RegID(_T("	MODBUS_OUTPUT5_DELAY_ON_TO_OFF	"))	;
	MODBUS_CYCLING_DELAY	=	Get_RegID(_T("	MODBUS_CYCLING_DELAY	"))	;
	MODBUS_CHANGOVER_DELAY	=	Get_RegID(_T("	MODBUS_CHANGOVER_DELAY	"))	;
	MODBUS_DISPLAY	=	Get_RegID(_T("	MODBUS_DISPLAY	"))	;
	MODBUS_LED1_CONTROL	=	Get_RegID(_T("	MODBUS_LED1_CONTROL	"))	;
	MODBUS_LED2_CONTROL	=	Get_RegID(_T("	MODBUS_LED2_CONTROL	"))	;
	MODBUS_LED3_CONTROL	=	Get_RegID(_T("	MODBUS_LED3_CONTROL	"))	;
	MODBUS_LED4_CONTROL	=	Get_RegID(_T("	MODBUS_LED4_CONTROL	"))	;
	MODBUS_LED5_CONTROL	=	Get_RegID(_T("	MODBUS_LED5_CONTROL	"))	;
	MODBUS_LED6_CONTROL	=	Get_RegID(_T("	MODBUS_LED6_CONTROL	"))	;
	MODBUS_LED7_CONTROL	=	Get_RegID(_T("	MODBUS_LED7_CONTROL	"))	;
	MODBUS_OVERRIDE_TIMER	=	Get_RegID(_T("	MODBUS_OVERRIDE_TIMER	"))	;
	MODBUS_OVERRIDE_TIMER_LEFT	=	Get_RegID(_T("	MODBUS_OVERRIDE_TIMER_LEFT	"))	;
	MODBUS_FILTER	=	Get_RegID(_T("	MODBUS_FILTER	"))	;
	MODBUS_HEAT_COOL_CONFIG	=	Get_RegID(_T("	MODBUS_HEAT_COOL_CONFIG	"))	;
	MODBUS_INTERNAL_TEMP_IC	=	Get_RegID(_T("	MODBUS_INTERNAL_TEMP_IC	"))	;
	MODBUS_INTERNAL_THERMISTOR	=	Get_RegID(_T("	MODBUS_INTERNAL_THERMISTOR	"))	;
	MODBUS_CALIBRATION_INTERNAL_THERMISTOR	=	Get_RegID(_T("	MODBUS_CALIBRATION_INTERNAL_THERMISTOR	"))	;
	MODBUS_CALIBRATION_ANALOG_IN2	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG_IN2	"))	;
	MODBUS_TABLE1_ZERO	=	Get_RegID(_T("	MODBUS_TABLE1_ZERO	"))	;
	MODBUS_TABLE1_HALFONE	=	Get_RegID(_T("	MODBUS_TABLE1_HALFONE	"))	;
	MODBUS_TABLE1_ONE	=	Get_RegID(_T("	MODBUS_TABLE1_ONE	"))	;
	MODBUS_TABLE1_HALFTWO	=	Get_RegID(_T("	MODBUS_TABLE1_HALFTWO	"))	;
	MODBUS_TABLE1_TWO	=	Get_RegID(_T("	MODBUS_TABLE1_TWO	"))	;
	MODBUS_TABLE1_HALFTHREE	=	Get_RegID(_T("	MODBUS_TABLE1_HALFTHREE	"))	;
	MODBUS_TABLE1_THREE	=	Get_RegID(_T("	MODBUS_TABLE1_THREE	"))	;
	MODBUS_TABLE1_HALFFOUR	=	Get_RegID(_T("	MODBUS_TABLE1_HALFFOUR	"))	;
	MODBUS_TABLE1_FOUR	=	Get_RegID(_T("	MODBUS_TABLE1_FOUR	"))	;
	MODBUS_TABLE1_HALFFIVE	=	Get_RegID(_T("	MODBUS_TABLE1_HALFFIVE	"))	;
	MODBUS_TABLE1_FIVE	=	Get_RegID(_T("	MODBUS_TABLE1_FIVE	"))	;
	MODBUS_TABLE2_ZERO	=	Get_RegID(_T("	MODBUS_TABLE2_ZERO	"))	;
	MODBUS_TABLE2_HALFONE	=	Get_RegID(_T("	MODBUS_TABLE2_HALFONE	"))	;
	MODBUS_TABLE2_ONE	=	Get_RegID(_T("	MODBUS_TABLE2_ONE	"))	;
	MODBUS_TABLE2_HALFTWO	=	Get_RegID(_T("	MODBUS_TABLE2_HALFTWO	"))	;
	MODBUS_TABLE2_TWO	=	Get_RegID(_T("	MODBUS_TABLE2_TWO	"))	;
	MODBUS_TABLE2_HALFTHREE	=	Get_RegID(_T("	MODBUS_TABLE2_HALFTHREE	"))	;
	MODBUS_TABLE2_THREE	=	Get_RegID(_T("	MODBUS_TABLE2_THREE	"))	;
	MODBUS_TABLE2_HALFFOUR	=	Get_RegID(_T("	MODBUS_TABLE2_HALFFOUR	"))	;
	MODBUS_TABLE2_FOUR	=	Get_RegID(_T("	MODBUS_TABLE2_FOUR	"))	;
	MODBUS_TABLE2_HALFFIVE	=	Get_RegID(_T("	MODBUS_TABLE2_HALFFIVE	"))	;
	MODBUS_TABLE2_FIVE	=	Get_RegID(_T("	MODBUS_TABLE2_FIVE	"))	;
	MODBUS_INPUT1_SELECT	=	Get_RegID(_T("	MODBUS_INPUT1_SELECT	"))	;
	MODBUS_UNIVERSAL_DB_HI	=	Get_RegID(_T("	MODBUS_UNIVERSAL_DB_HI	"))	;
	MODBUS_UNIVERSAL_DB_LO	=	Get_RegID(_T("	MODBUS_UNIVERSAL_DB_LO	"))	;
	MODBUS_UNIVERSAL_PTERM	=	Get_RegID(_T("	MODBUS_UNIVERSAL_PTERM	"))	;
	MODBUS_UNIVERSAL_ITERM	=	Get_RegID(_T("	MODBUS_UNIVERSAL_ITERM	"))	;
	MODBUS_UNIVERSAL_SET	=	Get_RegID(_T("	MODBUS_UNIVERSAL_SET	"))	;
	MODBUS_PID_OUTPUT1	=	Get_RegID(_T("	MODBUS_PID_OUTPUT1	"))	;
	MODBUS_PID_OUTPUT2	=	Get_RegID(_T("	MODBUS_PID_OUTPUT2	"))	;
	MODBUS_PID_OUTPUT3	=	Get_RegID(_T("	MODBUS_PID_OUTPUT3	"))	;
	MODBUS_PID_OUTPUT4	=	Get_RegID(_T("	MODBUS_PID_OUTPUT4	"))	;
	MODBUS_PID_OUTPUT5	=	Get_RegID(_T("	MODBUS_PID_OUTPUT5	"))	;
	MODBUS_PID_OUTPUT6	=	Get_RegID(_T("	MODBUS_PID_OUTPUT6	"))	;
	MODBUS_PID_OUTPUT7	=	Get_RegID(_T("	MODBUS_PID_OUTPUT7	"))	;
	MODBUS_UNIVERSAL_OUTPUT_BEGIN	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_BEGIN	"))	;
	MODBUS_UNIVERSAL_OUTPUT_COOL1	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_COOL1	"))	;
	MODBUS_UNIVERSAL_OUTPUT_COOL2	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_COOL2	"))	;
	MODBUS_UNIVERSAL_OUTPUT_COOL3	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_COOL3	"))	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT1	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_HEAT1	"))	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT2	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_HEAT2	"))	;
	MODBUS_UNIVERSAL_OUTPUT_HEAT3	=	Get_RegID(_T("	MODBUS_UNIVERSAL_OUTPUT_HEAT3	"))	;
	MODBUS_UNIVERSAL_VALVE_BEGIN	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_BEGIN	"))	;
	MODBUS_UNIVERSAL_VALVE_COOL1	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_COOL1	"))	;
	MODBUS_UNIVERSAL_VALVE_COOL2	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_COOL2	"))	;
	MODBUS_UNIVERSAL_VALVE_COOL3	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_COOL3	"))	;
	MODBUS_UNIVERSAL_VALVE_HEAT1	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_HEAT1	"))	;
	MODBUS_UNIVERSAL_VALVE_HEAT2	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_HEAT2	"))	;
	MODBUS_UNIVERSAL_VALVE_HEAT3	=	Get_RegID(_T("	MODBUS_UNIVERSAL_VALVE_HEAT3	"))	;
	MODBUS_HEAT_UNIVERSAL_TABLE	=	Get_RegID(_T("	MODBUS_HEAT_UNIVERSAL_TABLE	"))	;
	MODBUS_COOL_UNIVERSAL_TABLE	=	Get_RegID(_T("	MODBUS_COOL_UNIVERSAL_TABLE	"))	;
	MODBUS_PID_UNIVERSAL	=	Get_RegID(_T("	MODBUS_PID_UNIVERSAL	"))	;
	MODBUS_UNITS1_HIGH	=	Get_RegID(_T("	MODBUS_UNITS1_HIGH	"))	;
	MODBUS_UNITS1_LOW	=	Get_RegID(_T("	MODBUS_UNITS1_LOW	"))	;
	MODBUS_UNITS2_HIGH	=	Get_RegID(_T("	MODBUS_UNITS2_HIGH	"))	;
	MODBUS_UNITS2_LOW	=	Get_RegID(_T("	MODBUS_UNITS2_LOW	"))	;
	MODBUS_UNIVERSAL_NIGHTSET	=	Get_RegID(_T("	MODBUS_UNIVERSAL_NIGHTSET	"))	;
	MODBUS_HEAT_ORIGINAL_TABLE	=	Get_RegID(_T("	MODBUS_HEAT_ORIGINAL_TABLE	"))	;
	MODBUS_COOL_ORIGINAL_TABLE	=	Get_RegID(_T("	MODBUS_COOL_ORIGINAL_TABLE	"))	;
	MODBUS_PID2_MODE_OPERATION	=	Get_RegID(_T("	MODBUS_PID2_MODE_OPERATION	"))	;
	MODBUS_VALVE_TRAVEL_TIME	=	Get_RegID(_T("	MODBUS_VALVE_TRAVEL_TIME	"))	;
	MODBUS_MODE_OUTPUT1	=	Get_RegID(_T("	MODBUS_MODE_OUTPUT1	"))	;
	MODBUS_MODE_OUTPUT2	=	Get_RegID(_T("	MODBUS_MODE_OUTPUT2	"))	;
	MODBUS_MODE_OUTPUT3	=	Get_RegID(_T("	MODBUS_MODE_OUTPUT3	"))	;
	MODBUS_MODE_OUTPUT4	=	Get_RegID(_T("	MODBUS_MODE_OUTPUT4	"))	;
	MODBUS_MODE_OUTPUT5	=	Get_RegID(_T("	MODBUS_MODE_OUTPUT5	"))	;
	MODBUS_VALVE_PERCENT	=	Get_RegID(_T("	MODBUS_VALVE_PERCENT	"))	;
	MODBUS_INTERLOCK_OUTPUT1	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT1	"))	;
	MODBUS_INTERLOCK_OUTPUT2	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT2	"))	;
	MODBUS_INTERLOCK_OUTPUT3	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT3	"))	;
	MODBUS_INTERLOCK_OUTPUT4	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT4	"))	;
	MODBUS_INTERLOCK_OUTPUT5	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT5	"))	;
	MODBUS_INTERLOCK_OUTPUT6	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT6	"))	;
	MODBUS_INTERLOCK_OUTPUT7	=	Get_RegID(_T("	MODBUS_INTERLOCK_OUTPUT7	"))	;
	MODBUS_SETPOINT_INCREASE	=	Get_RegID(_T("	MODBUS_SETPOINT_INCREASE	"))	;
	MODBUS_LAST_KEY_TIMER	=	Get_RegID(_T("	MODBUS_LAST_KEY_TIMER	"))	;
	MODBUS_FREEZE_TEMP_SETPOIN	=	Get_RegID(_T("	MODBUS_FREEZE_TEMP_SETPOIN	"))	;
	MODBUS_FREEZE_DELAY_ON	=	Get_RegID(_T("	MODBUS_FREEZE_DELAY_ON	"))	;
	MODBUS_FREEZE_DELAY_OFF	=	Get_RegID(_T("	MODBUS_FREEZE_DELAY_OFF	"))	;
	MODBUS_ANALOG1_FUNCTION	=	Get_RegID(_T("	MODBUS_ANALOG1_FUNCTION	"))	;
	MODBUS_ANALOG2_FUNCTION	=	Get_RegID(_T("	MODBUS_ANALOG2_FUNCTION	"))	;
	MODBUS_DIGITAL1_FUNCTION	=	Get_RegID(_T("	MODBUS_DIGITAL1_FUNCTION	"))	;
	MODBUS_TIMER_ON	=	Get_RegID(_T("	MODBUS_TIMER_ON	"))	;
	MODBUS_TIMER_OFF	=	Get_RegID(_T("	MODBUS_TIMER_OFF	"))	;
	MODBUS_TIMER_UNITS	=	Get_RegID(_T("	MODBUS_TIMER_UNITS	"))	;
	MODBUS_KEYPAD_VALUE	=	Get_RegID(_T("	MODBUS_KEYPAD_VALUE	"))	;
	MODBUS_DISPLAY_HUNDRED	=	Get_RegID(_T("	MODBUS_DISPLAY_HUNDRED	"))	;
	MODBUS_DISPLAY_TEN	=	Get_RegID(_T("	MODBUS_DISPLAY_TEN	"))	;
	MODBUS_DISPLAY_DIGITAL	=	Get_RegID(_T("	MODBUS_DISPLAY_DIGITAL	"))	;
	MODBUS_DISPLAY_STATUS	=	Get_RegID(_T("	MODBUS_DISPLAY_STATUS	"))	;
	MODBUS_INPUT_MANU_ENABLE	=	Get_RegID(_T("	MODBUS_INPUT_MANU_ENABLE	"))	;
	MODBUS_OUTPUT_MANU_ENABLE	=	Get_RegID(_T("	MODBUS_OUTPUT_MANU_ENABLE	"))	;
	MODBUS_DIGITAL_INPUT	=	Get_RegID(_T("	MODBUS_DIGITAL_INPUT	"))	;
	MODBUS_MANU_RELAY1	=	Get_RegID(_T("	MODBUS_MANU_RELAY1	"))	;
	MODBUS_MANU_RELAY2	=	Get_RegID(_T("	MODBUS_MANU_RELAY2	"))	;
	MODBUS_MANU_RELAY3	=	Get_RegID(_T("	MODBUS_MANU_RELAY3	"))	;
	MODBUS_MANU_RELAY4	=	Get_RegID(_T("	MODBUS_MANU_RELAY4	"))	;
	MODBUS_MANU_RELAY5	=	Get_RegID(_T("	MODBUS_MANU_RELAY5	"))	;
	MODBUS_DEAD_MASTER	=	Get_RegID(_T("	MODBUS_DEAD_MASTER	"))	;
	MODBUS_ROUND_DISPLAY	=	Get_RegID(_T("	MODBUS_ROUND_DISPLAY	"))	;
	MODBUS_MIN_ADDRESS	=	Get_RegID(_T("	MODBUS_MIN_ADDRESS	"))	;
	MODBUS_MAX_ADDRESS	=	Get_RegID(_T("	MODBUS_MAX_ADDRESS	"))	;
	MODBUS_FAN_GRIDPOINT	=	Get_RegID(_T("	MODBUS_FAN_GRIDPOINT	"))	;
	MODBUS_MODE_GRIDPOINT	=	Get_RegID(_T("	MODBUS_MODE_GRIDPOINT	"))	;
	MODBUS_HOLD_GRIDPOINT	=	Get_RegID(_T("	MODBUS_HOLD_GRIDPOINT	"))	;
	MODBUS_CONFIGURATION	=	Get_RegID(_T("	MODBUS_CONFIGURATION	"))	;
	MODBUS_UTIL_MODE	=	Get_RegID(_T("	MODBUS_UTIL_MODE	"))	;
	MODBUS_EEPROM_SIZE	=	Get_RegID(_T("	MODBUS_EEPROM_SIZE	"))	;
	MODBUS_TIMER_SELECT	=	Get_RegID(_T("	MODBUS_TIMER_SELECT	"))	;
	MODBUS_OUTPUT1_FUNCTION	=	Get_RegID(_T("	MODBUS_OUTPUT1_FUNCTION	"))	;
	MODBUS_ROTATION_OUT2	=	Get_RegID(_T("	MODBUS_ROTATION_OUT2	"))	;
	MODBUS_ROTATION_OUT3	=	Get_RegID(_T("	MODBUS_ROTATION_OUT3	"))	;
	MODBUS_ROTATION_OUT4	=	Get_RegID(_T("	MODBUS_ROTATION_OUT4	"))	;
	MODBUS_ROTATION_OUT5	=	Get_RegID(_T("	MODBUS_ROTATION_OUT5	"))	;
	MODBUS_ROTATION_TIME_LEFT	=	Get_RegID(_T("	MODBUS_ROTATION_TIME_LEFT	"))	;
	MODBUS_OUTPUT2_FUNCTION	=	Get_RegID(_T("	MODBUS_OUTPUT2_FUNCTION	"))	;
	MODBUS_OUTPUT3_FUNCTION	=	Get_RegID(_T("	MODBUS_OUTPUT3_FUNCTION	"))	;
	MODBUS_OUTPUT4_FUNCTION	=	Get_RegID(_T("	MODBUS_OUTPUT4_FUNCTION	"))	;
	MODBUS_OUTPUT5_FUNCTION	=	Get_RegID(_T("	MODBUS_OUTPUT5_FUNCTION	"))	;
	MODBUS_DEFAULT_SETPOINT	=	Get_RegID(_T("	MODBUS_DEFAULT_SETPOINT	"))	;
	MODBUS_SETPOINT_CONTROL	=	Get_RegID(_T("	MODBUS_SETPOINT_CONTROL	"))	;
	MODBUS_PIR_STAGE	=	Get_RegID(_T("	MODBUS_PIR_STAGE	"))	;
	MODBUS_OUTPUT_PWM_AUTO_COAST	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_COAST	"))	;
	MODBUS_OUTPUT_PWM_AUTO_COOL1	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_COOL1	"))	;
	MODBUS_OUTPUT_PWM_AUTO_COOL2	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_COOL2	"))	;
	MODBUS_OUTPUT_PWM_AUTO_COOL3	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_COOL3	"))	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT1	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_HEAT1	"))	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT2	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_HEAT2	"))	;
	MODBUS_OUTPUT_PWM_AUTO_HEAT3	=	Get_RegID(_T("	MODBUS_OUTPUT_PWM_AUTO_HEAT3	"))	;
	MODBUS_PWM_OUT4	=	Get_RegID(_T("	MODBUS_PWM_OUT4	"))	;
	MODBUS_PWM_OUT5	=	Get_RegID(_T("	MODBUS_PWM_OUT5	"))	;
	MODBUS_FREE_COOL_CONFIG	=	Get_RegID(_T("	MODBUS_FREE_COOL_CONFIG	"))	;
	MODBUS_VALVE_OFF_TABLE_COAST	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_COAST	"))	;
	MODBUS_VALVE_OFF_TABLE_COOL1	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_COOL1	"))	;
	MODBUS_VALVE_OFF_TABLE_COOL2	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_COOL2	"))	;
	MODBUS_VALVE_OFF_TABLE_COOL3	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_COOL3	"))	;
	MODBUS_VALVE_OFF_TABLE_HEAT1	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_HEAT1	"))	;
	MODBUS_VALVE_OFF_TABLE_HEAT2	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_HEAT2	"))	;
	MODBUS_VALVE_OFF_TABLE_HEAT3	=	Get_RegID(_T("	MODBUS_VALVE_OFF_TABLE_HEAT3	"))	;
	MODBUS_LOCK_REGISTER	=	Get_RegID(_T("	MODBUS_LOCK_REGISTER	"))	;
	MODBUS_ANALOG1_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG1_RANGE	"))	;
	MODBUS_ANALOG2_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG2_RANGE	"))	;
	MODBUS_ANALOG3_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG3_RANGE	"))	;
	MODBUS_ANALOG4_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG4_RANGE	"))	;
	MODBUS_ANALOG5_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG5_RANGE	"))	;
	MODBUS_ANALOG6_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG6_RANGE	"))	;
	MODBUS_ANALOG7_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG7_RANGE	"))	;
	MODBUS_ANALOG8_RANGE	=	Get_RegID(_T("	MODBUS_ANALOG8_RANGE	"))	;
	MODBUS_ANALOG_INPUT1	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT1	"))	;
	MODBUS_ANALOG_INPUT2	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT2	"))	;
	MODBUS_ANALOG_INPUT3	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT3	"))	;
	MODBUS_ANALOG_INPUT4	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT4	"))	;
	MODBUS_ANALOG_INPUT5	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT5	"))	;
	MODBUS_ANALOG_INPUT6	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT6	"))	;
	MODBUS_ANALOG_INPUT7	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT7	"))	;
	MODBUS_ANALOG_INPUT8	=	Get_RegID(_T("	MODBUS_ANALOG_INPUT8	"))	;
	MODBUS_CALIBRATION_ANALOG1	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG1	"))	;
	MODBUS_CALIBRATION_ANALOG2	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG2	"))	;
	MODBUS_CALIBRATION_ANALOG3	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG3	"))	;
	MODBUS_CALIBRATION_ANALOG4	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG4	"))	;
	MODBUS_CALIBRATION_ANALOG5	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG5	"))	;
	MODBUS_CALIBRATION_ANALOG6	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG6	"))	;
	MODBUS_CALIBRATION_ANALOG7	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG7	"))	;
	MODBUS_CALIBRATION_ANALOG8	=	Get_RegID(_T("	MODBUS_CALIBRATION_ANALOG8	"))	;
	MODBUS_LINE1_CHAR1	=	Get_RegID(_T("	MODBUS_LINE1_CHAR1	"))	;
	MODBUS_LINE1_CHAR2	=	Get_RegID(_T("	MODBUS_LINE1_CHAR2	"))	;
	MODBUS_LINE1_CHAR3	=	Get_RegID(_T("	MODBUS_LINE1_CHAR3	"))	;
	MODBUS_LINE1_CHAR4	=	Get_RegID(_T("	MODBUS_LINE1_CHAR4	"))	;
	MODBUS_LINE1_CHAR5	=	Get_RegID(_T("	MODBUS_LINE1_CHAR5	"))	;
	MODBUS_LINE1_CHAR6	=	Get_RegID(_T("	MODBUS_LINE1_CHAR6	"))	;
	MODBUS_LINE1_CHAR7	=	Get_RegID(_T("	MODBUS_LINE1_CHAR7	"))	;
	MODBUS_LINE1_CHAR8	=	Get_RegID(_T("	MODBUS_LINE1_CHAR8	"))	;
	MODBUS_LINE2_CHAR1	=	Get_RegID(_T("	MODBUS_LINE2_CHAR1	"))	;
	MODBUS_LINE2_CHAR2	=	Get_RegID(_T("	MODBUS_LINE2_CHAR2	"))	;
	MODBUS_LINE2_CHAR3	=	Get_RegID(_T("	MODBUS_LINE2_CHAR3	"))	;
	MODBUS_LINE2_CHAR4	=	Get_RegID(_T("	MODBUS_LINE2_CHAR4	"))	;
	MODBUS_LINE2_CHAR5	=	Get_RegID(_T("	MODBUS_LINE2_CHAR5	"))	;
	MODBUS_LINE2_CHAR6	=	Get_RegID(_T("	MODBUS_LINE2_CHAR6	"))	;
	MODBUS_LINE2_CHAR7	=	Get_RegID(_T("	MODBUS_LINE2_CHAR7	"))	;
	MODBUS_LINE2_CHAR8	=	Get_RegID(_T("	MODBUS_LINE2_CHAR8	"))	;
	MODBUS_LCD_TURN_OFF	=	Get_RegID(_T("	MODBUS_LCD_TURN_OFF	"))	;
	MODBUS_LCD_SCREEN1	=	Get_RegID(_T("	MODBUS_LCD_SCREEN1	"))	;
	MODBUS_LCD_SCREEN2	=	Get_RegID(_T("	MODBUS_LCD_SCREEN2	"))	;
	MODBUS_SUN_ICON_CONTROL	=	Get_RegID(_T("	MODBUS_SUN_ICON_CONTROL	"))	;
	MODBUS_MOON_ICON_CONTROL	=	Get_RegID(_T("	MODBUS_MOON_ICON_CONTROL	"))	;
	MODBUS_TURN_OFF_FAN	=	Get_RegID(_T("	MODBUS_TURN_OFF_FAN	"))	;
	MODBUS_TEST2	=	Get_RegID(_T("	MODBUS_TEST2	"))	;
	MODBUS_TEST3	=	Get_RegID(_T("	MODBUS_TEST3	"))	;
	MODBUS_PRESSURE_DATA_WC	=	Get_RegID(_T("	MODBUS_PRESSURE_DATA_WC	"))	;
	MODBUS_PRESSURE_DATA_PA	=	Get_RegID(_T("	MODBUS_PRESSURE_DATA_PA	"))	;
	MODBUS_FEEDBACK_DATA	=	Get_RegID(_T("	MODBUS_FEEDBACK_DATA	"))	;
	MODBUS_DAC_DATA	=	Get_RegID(_T("	MODBUS_DAC_DATA	"))	;
	MODBUS_PRESSURE_SENSOR_SELECT	=	Get_RegID(_T("	MODBUS_PRESSURE_SENSOR_SELECT	"))	;
	MODBUS_PRESSURE_UNIT_SELECT	=	Get_RegID(_T("	MODBUS_PRESSURE_UNIT_SELECT	"))	;
	MODBUS_PRESSURE_MIN	=	Get_RegID(_T("	MODBUS_PRESSURE_MIN	"))	;
	MODBUS_PRESSURE_MAX	=	Get_RegID(_T("	MODBUS_PRESSURE_MAX	"))	;
	MODBUS_CAL	=	Get_RegID(_T("	MODBUS_CAL	"))	;
	MODBUS_MODE_SELECT	=	Get_RegID(_T("	MODBUS_MODE_SELECT	"))	;
	MODBUS_DEFAULT	=	Get_RegID(_T("	MODBUS_DEFAULT	"))	;
	MODBUS_OUTPUT_USER_RANGE	=	Get_RegID(_T("	MODBUS_OUTPUT_USER_RANGE	"))	;
	MODBUS_PRESSURE_OUTPUT_SELECT	=	Get_RegID(_T("	MODBUS_PRESSURE_OUTPUT_SELECT	"))	;
	MODBUS_PRESSURE_SETPOINT	=	Get_RegID(_T("	MODBUS_PRESSURE_SETPOINT	"))	;
	MODBUS_PRESSURE_CAL_POINTS	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_POINTS	"))	;
	MODBUS_PRESSURE_CAL_ZERO	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_ZERO	"))	;
	MODBUS_OUTPUT_VOLT_OFFSET	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_OFFSET	"))	;
	MODBUS_OUTPUT_CURRENT_OFFSET	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_OFFSET	"))	;
	MODBUS_OUTPUT_CURRENT_ADJ	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_ADJ	"))	;
	MODBUS_PRESSURE_CAL_PR1	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR1	"))	;
	MODBUS_PRESSURE_CAL_VOLT1	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT1	"))	;
	MODBUS_PRESSURE_CAL_PR2	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR2	"))	;
	MODBUS_PRESSURE_CAL_VOLT2	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT2	"))	;
	MODBUS_PRESSURE_CAL_PR3	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR3	"))	;
	MODBUS_PRESSURE_CAL_VOLT3	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT3	"))	;
	MODBUS_PRESSURE_CAL_PR4	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR4	"))	;
	MODBUS_PRESSURE_CAL_VOLT4	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT4	"))	;
	MODBUS_PRESSURE_CAL_PR5	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR5	"))	;
	MODBUS_PRESSURE_CAL_VOLT5	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT5	"))	;
	MODBUS_PRESSURE_CAL_PR6	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR6	"))	;
	MODBUS_PRESSURE_CAL_VOLT6	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT6	"))	;
	MODBUS_PRESSURE_CAL_PR7	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR7	"))	;
	MODBUS_PRESSURE_CAL_VOLT7	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT7	"))	;
	MODBUS_PRESSURE_CAL_PR8	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR8	"))	;
	MODBUS_PRESSURE_CAL_VOLT8	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT8	"))	;
	MODBUS_PRESSURE_CAL_PR9	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR9	"))	;
	MODBUS_PRESSURE_CAL_VOLT9	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT9	"))	;
	MODBUS_PRESSURE_CAL_PR10	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_PR10	"))	;
	MODBUS_PRESSURE_CAL_VOLT10	=	Get_RegID(_T("	MODBUS_PRESSURE_CAL_VOLT10	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION1	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION1	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION2	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION2	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION3	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION3	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION4	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION4	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION5	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION5	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION6	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION6	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION7	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION7	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION8	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION8	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION9	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION9	"))	;
	MODBUS_OUTPUT_VOLT_CALIBRATION10	=	Get_RegID(_T("	MODBUS_OUTPUT_VOLT_CALIBRATION10	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION1	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION1	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION2	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION2	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION3	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION3	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION4	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION4	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION5	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION5	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION6	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION6	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION7	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION7	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION8	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION8	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION9	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION9	"))	;
	MODBUS_OUTPUT_CURRENT_CALIBRATION10	=	Get_RegID(_T("	MODBUS_OUTPUT_CURRENT_CALIBRATION10	"))	;
	MODBUS_CAL_UNIT	=	Get_RegID(_T("	MODBUS_CAL_UNIT	"))	;

#endif

}
void CPressureSensorForm::OnInitialUpdate()
{
	CFormView::OnInitialUpdate(); 
}


void CPressureSensorForm::OnCbnSelchangeBoxunit()
{
	 int sel=m_combox_unit.GetCurSel();
	  
	 int ret=write_one(g_tstat_id,MODBUS_PRESSURE_UNIT_SELECT,sel+1);
	 if (ret>0)
	 {
	  product_register_value[MODBUS_PRESSURE_UNIT_SELECT]=sel+1;
	  ret=Read_Multi(g_tstat_id,&product_register_value[MODBUS_PRESSURE_DATA_PA],MODBUS_PRESSURE_DATA_PA,1);
 
	
	 } 
	 else
	 {
	 AfxMessageBox(_T("Fail,Please try again."));
	 }
	  Show_Pressure();
}


void CPressureSensorForm::OnCbnSelchangeComboOutputtype()
{
	int sel=m_cmbox_outputtype.GetCurSel();
	int ret=write_one(g_tstat_id,MODBUS_PRESSURE_OUTPUT_SELECT,sel);
	if (ret>0)
	{
		product_register_value[MODBUS_PRESSURE_OUTPUT_SELECT]=sel;

	} 
	else
	{
		AfxMessageBox(_T("Fail,Please try again."));
	}
	Show_Pressure();
}


void CPressureSensorForm::OnBnClickedButtonOutputtable()
{ 
	COutPutDlg outputtabledlg;
	outputtabledlg.DoModal();
}

void CPressureSensorForm::Changing_Parter(){
CString StrTemp;
	if (product_register_value[MODBUS_INPUT_MANU_ENABLE]==0)
	{

		double reg467=(double)((short)product_register_value[MODBUS_PRESSURE_RATIO]);
		double reg468=(double)((short)product_register_value[MODBUS_PRESSURE_INDEX]);
		m_output_value=reg467*pow(10,reg468);
	}
	else
	{
		m_output_value=(double)product_register_value[MODBUS_PRESSURE_ORG_VALUE];
	}

	GetDlgItem(IDC_PRESSURE_SENSOR)->SetWindowText(Get_PressureSensor(m_output_value));


	double max,min;
	max=((double)((short)product_register_value[MODBUS_PRESSURE_MAX]))/100;
	min=((double)((short)product_register_value[MODBUS_PRESSURE_MIN]))/100;
	if (product_register_value[MODBUS_OUTPUT1_SCALE]==1)
	{
		m_combox_output_range.SetCurSel(0);
		m_signal_value=((m_output_value-min)/(max-min))*10;
		if (m_signal_value>=10)
		{
			m_signal_value=10;
		}
		if (m_signal_value<=0)
		{
			m_signal_value = 0;
		}


		StrTemp.Format(_T("%.2lf V"),m_signal_value);
	}
	if (product_register_value[MODBUS_OUTPUT1_SCALE]==2)
	{
		m_combox_output_range.SetCurSel(1);
		m_signal_value=((m_output_value-min)/(max-min))*5;

		if (m_signal_value>=5)
		{
			m_signal_value=5;
		}
		if (m_signal_value<=0)
		{
			m_signal_value = 0;
		}

		StrTemp.Format(_T("%.2lf V"),m_signal_value);
	}
	if (product_register_value[MODBUS_OUTPUT1_SCALE]==5)
	{
		m_combox_output_range.SetCurSel(2);
		m_signal_value=((m_output_value-min)/(max-min))*16+4;
		if (m_signal_value>=20)
		{
			m_signal_value=20;
		}
		if (m_signal_value<=4)
		{
			m_signal_value = 4;
		}
		StrTemp.Format(_T("%.2lf ma"),m_signal_value);

	}
	m_edit_signal.SetWindowTextW(StrTemp);



}
LRESULT CPressureSensorForm::WindowProc(UINT message, WPARAM wParam, LPARAM lParam)
{
	
	if (message==FRESH_PRESSURE_SENSOR_BACK)
	{
	    Changing_Parter();
	  
	}
 
	return CFormView::WindowProc(message, wParam, lParam);
 
}


void CPressureSensorForm::OnDestroy()
{




	if(hFirstThread != NULL)
		TerminateThread(hFirstThread, 0);
	hFirstThread=NULL;
	CFormView::OnDestroy();

	
}


void CPressureSensorForm::OnCbnSelchangeKeypadlockcombo()
{
	int sel = m_keypad_lock.GetCurSel();
	if (product_register_value[MODBUS_SPECIAL_MENU_LOCK]==sel)
	{
		return;
	}
	int ret=write_one(g_tstat_id,MODBUS_SPECIAL_MENU_LOCK,sel);
	if (ret>0)
	{
		product_register_value[MODBUS_SPECIAL_MENU_LOCK]=sel;

	}
	if (product_register_value[MODBUS_SPECIAL_MENU_LOCK]>=0&&product_register_value[MODBUS_SPECIAL_MENU_LOCK]<=4)
	{
		m_keypad_lock.SetCurSel(product_register_value[MODBUS_SPECIAL_MENU_LOCK]);
	}
	else
	{
		m_keypad_lock.SetCurSel(0);
	}
}


void CPressureSensorForm::OnCbnSelchangeSensorType()
{


	int sel = m_Sensor_Type_Combox.GetCurSel();
	sel+=1;
	if (product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]==sel)
	{
		return;
	}
	int ret=write_one(g_tstat_id,MODBUS_PRESSURE_SENSOR_SELECT,sel);
	if (ret>0)
	{
	    product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]=sel;
		
	}
	else
	{
		MessageBox(_T("Write Fail!"));
	}
	if (product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]>=1&&product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]<=2)
	{
		m_Sensor_Type_Combox.SetCurSel(product_register_value[MODBUS_PRESSURE_SENSOR_SELECT]-1);
	}
	else
	{

		m_Sensor_Type_Combox.SetCurSel(0);
	}
}


void CPressureSensorForm::OnCbnSelchangeComboAm()
{
	int sel = m_am_combox.GetCurSel();
	if (product_register_value[MODBUS_INPUT_MANU_ENABLE]==sel)
	{
		return;
	}
	int ret=write_one(g_tstat_id,MODBUS_INPUT_MANU_ENABLE,sel);
	if (ret>0)
	{
	 product_register_value[MODBUS_INPUT_MANU_ENABLE]=sel;
	}
	else
	{
	MessageBox(_T("Write Fail!"));
	}
	if (product_register_value[MODBUS_INPUT_MANU_ENABLE]>=0&&product_register_value[MODBUS_INPUT_MANU_ENABLE]<=2)
	{
		m_am_combox.SetCurSel(product_register_value[MODBUS_INPUT_MANU_ENABLE]);
	}
	else
	{

		m_am_combox.SetCurSel(0);
	}
}


void CPressureSensorForm::OnEnKillfocusEditFilter()
{

    CString StrTemp;
	m_input_filter.GetWindowTextW(StrTemp);
	int IntValue=_wtoi(StrTemp);
	int ret= write_one(g_tstat_id,MODBUS_FILTER,IntValue);
	if (ret>0)
	{
	product_register_value[MODBUS_FILTER]=IntValue;
	}
	else
	{
	MessageBox(_T("Write Fail!"));
	}
	StrTemp.Format(_T("%d"),product_register_value[MODBUS_FILTER]);
	m_input_filter.SetWindowTextW(StrTemp);

}


void CPressureSensorForm::OnCbnSelchangeComboOutputRange()
{
    CString StrTemp;
	
	int sel = m_combox_output_range.GetCurSel();
	if (sel==0)
	{
	 sel =1;
	}
	else if (sel == 1)
	{
	 sel =2;
	}
	else if (sel == 2)
	{
	 sel =5;
	}
	else
	{

	}
	if (product_register_value[186]==sel)
	{
	return ;
	}

	int ret=write_one(g_tstat_id,186,sel);
	if (ret>0)
	{
		product_register_value[186]=sel;
	}
	else
	{
		MessageBox(_T("Write Fail!"));
	}


	Read_Multi(g_tstat_id,&product_register_value[450],450,50);  

	Read_Multi(g_tstat_id,&product_register_value[150],150,50); 

	//PostMessage(FRESH_PRESSURE_SENSOR_BACK,0,0);
	Changing_Parter();
}


void CPressureSensorForm::OnEnKillfocusPressureSensor()
{
	 CString StrTemp;
	 GetDlgItem(IDC_PRESSURE_SENSOR)->GetWindowTextW(StrTemp);
	 float floatValue;
	 int usValue;
	 floatValue = _wtof(StrTemp);
	 usValue= (int)(floatValue*100);
	 if (product_register_value[MODBUS_INPUT_MANU_ENABLE]==0)
	 {
 		 int ret=write_one(g_tstat_id,101,usValue);
 		 if (ret>0)
		 {
			 product_register_value[101]=usValue;
		 }
 		 else
 		 {
 			 MessageBox(_T("Write Fail!"));
 		 }
 		 StrTemp.Format(_T("%0.2lf"),((float)(short)product_register_value[101])/100);

	 }
	 else
	 {
 		 int ret=write_one(g_tstat_id,MODBUS_PRESSURE_ORG_VALUE,usValue);
 		 if (ret>0)
		 {
			 product_register_value[MODBUS_PRESSURE_ORG_VALUE]=usValue;
		 }
 		 else
 		 {
 			 MessageBox(_T("Write Fail!"));
 		 }
 		 StrTemp.Format(_T("%0.2lf"),((float)(short)product_register_value[MODBUS_PRESSURE_ORG_VALUE])/100);
	   


// 		 if((short)product_register_value[MODBUS_PRESSURE_ORG_VALUE]==usValue)	//Add this to judge weather this value need to change.
// 			 return;
// 
// 		 Post_Thread_Message(MY_WRITE_ONE,g_tstat_id,MODBUS_PRESSURE_ORG_VALUE,usValue,
// 			 (short)product_register_value[MODBUS_PRESSURE_ORG_VALUE],this->m_hWnd,IDC_PRESSURE_SENSOR,_T("Pressure Value"));

	 }
	 

}


void CPressureSensorForm::OnEnKillfocusEditSensorMin()
{
	CString StrTemp;
	//Get_PressureSensor((short)product_register_value[MODBUS_PRESSURE_MIN])
	GetDlgItem(IDC_EDIT_SENSOR_MIN)->GetWindowText(StrTemp);

	int IntValue=(short)(_wtof(StrTemp)*100);
 	int ret= write_one(g_tstat_id,MODBUS_PRESSURE_MIN,IntValue);
 	if (ret>0)
	{
		product_register_value[MODBUS_PRESSURE_MIN]=IntValue;
	}
 	else
 	{
 		MessageBox(_T("Write Fail!"));
 	}
 	StrTemp.Format(_T("%.2f"),((float)((short)product_register_value[MODBUS_PRESSURE_MIN]))/100);
 	
	GetDlgItem(IDC_EDIT_SENSOR_MIN)->SetWindowTextW(StrTemp);

// 
// 	if((short)product_register_value[MODBUS_PRESSURE_MIN]==IntValue)	//Add this to judge weather this value need to change.
// 		return;
// 
// 	Post_Thread_Message(MY_WRITE_ONE,g_tstat_id,MODBUS_PRESSURE_MIN,IntValue,
// 		(short)product_register_value[MODBUS_PRESSURE_MIN],this->m_hWnd,IDC_EDIT_SENSOR_MIN,_T("Write Min"));

}


void CPressureSensorForm::OnEnKillfocusEditSensorMax()
{
	CString StrTemp;
	//Get_PressureSensor((short)product_register_value[MODBUS_PRESSURE_MIN])
	GetDlgItem(IDC_EDIT_SENSOR_MAX)->GetWindowText(StrTemp);
	 
	int IntValue=(short)(_wtof(StrTemp)*100);
	int ret= write_one(g_tstat_id,MODBUS_PRESSURE_MAX,IntValue);
	if (ret>0)
	{
		product_register_value[MODBUS_PRESSURE_MAX]=IntValue;
	}
	else
	{
		MessageBox(_T("Write Fail!"));
	}
	StrTemp.Format(_T("%.2f"),((float)((short)product_register_value[MODBUS_PRESSURE_MAX]))/100);
	GetDlgItem(IDC_EDIT_SENSOR_MAX)->SetWindowTextW(StrTemp);

 

}


//BOOL CPressureSensorForm::PreTranslateMessage(MSG* pMsg)
//{
//	
//     if (pMsg->)
//     {
//     }
//	return CFormView::PreTranslateMessage(pMsg);
//}


//void CPressureSensorForm::OnHotKey(UINT nHotKeyId, UINT nKey1, UINT nKey2)
//{
//	 
//
//	CFormView::OnHotKey(nHotKeyId, nKey1, nKey2);
//}


void CPressureSensorForm::OnEnSetfocusPressureSensor()
{
	 m_EDIT_ID=IDC_PRESSURE_SENSOR;
}


void CPressureSensorForm::OnEnSetfocusEditFilter()
{
	 m_EDIT_ID=IDC_EDIT_FILTER;
}


void CPressureSensorForm::OnSetfocusEditSensorMin()
{
	m_EDIT_ID=IDC_EDIT_SENSOR_MIN;
}


void CPressureSensorForm::OnSetfocusEditSensorMax()
{
	m_EDIT_ID=IDC_EDIT_SENSOR_MAX;
}
BOOL CPressureSensorForm::PreTranslateMessage(MSG* pMsg)
{

	if(WM_KEYDOWN == pMsg->message)
	{

		CEdit* pEdit = (CEdit*)GetDlgItem(m_EDIT_ID);

		ASSERT(pEdit);

		if(pMsg->hwnd == pEdit->GetSafeHwnd() && VK_RETURN == pMsg->wParam)

		{

			switch (m_EDIT_ID)
			{
			case IDC_PRESSURE_SENSOR:
				{
					OnEnKillfocusEditFilter();
				}
				break;
			case IDC_EDIT_FILTER:
				{
					OnEnKillfocusPressureSensor();
				}
				break;
			case IDC_EDIT_SENSOR_MIN:
				{
					OnEnKillfocusEditSensorMin();
				}
				break;
			case IDC_EDIT_SENSOR_MAX:
				{
					OnEnKillfocusEditSensorMax();
				}
				break;
			default:
				{
					return -1;
				}
			}

			return TRUE;

		}

	}
	return CFormView::PreTranslateMessage(pMsg);
}
